<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>Stokes-square-convection-fs-1e4-ALA-implicit-Di-0.25-p2p1</name>
  <owner userid="rhodrid"/>

  <tags>flml</tags>

  <problem_definition length="medium" nprocs="1">
    <command_line>fluidity -v2 -l Stokes-square-convection-A.flml; fluidity -v2 -l Stokes-square-convection-B.flml</command_line>
  </problem_definition>

<variables>  

<variable name="T_int" language="python">
from fluidity_tools import stat_parser as stat
T_int = stat("stokes-B.stat")["Fluid"]["Temperature"]["integral"][-1]
</variable>

<variable name="T_ref_int" language="python">
from fluidity_tools import stat_parser as stat
T_ref_int = stat("stokes-B.stat")["Fluid"]["CompressibleReferenceTemperature"]["integral"][-1]
</variable>

<variable name="nu_top" language="python">
from fluidity_tools import stat_parser as stat
nu_top = abs(stat("stokes-B.stat")["Fluid"]["FullTemperature"]["surface_integral%TopH"][-1])
</variable>

<variable name="rms_vel" language="python">
from fluidity_tools import stat_parser as stat
rms_vel= stat("stokes-B.stat")["Fluid"]["Velocity%magnitude"]["l2norm"][-1]
</variable>

<variable name="adiabatic_absorption" language="python">
from fluidity_tools import stat_parser as stat
adiabatic_absorption= stat("stokes-B.stat")["Fluid"]["Adiabatic_Absorption"]["integral"][-1]
</variable>

<variable name="viscous_dissipation" language="python">
from fluidity_tools import stat_parser as stat
viscous_dissipation= stat("stokes-B.stat")["Fluid"]["TemperatureSource"]["integral"][-1]
</variable>

<variable name="convergenceAB" language="python">
from fluidity_tools import stat_parser as stat
from math import sqrt, log

file1 = 'stokes-A.stat'
file2 = 'stokes-B.stat'

print file1, "->", file2

stat1 = stat(file1)
stat2 = stat(file2)

error_l2_1 = sqrt(stat1["Fluid"]["DifferenceSquared"]["surface_integral%TopSurfaceL2Norm"][-1])
error_l2_2 = sqrt(stat2["Fluid"]["DifferenceSquared"]["surface_integral%TopSurfaceL2Norm"][-1])
convergence_l2 = log((error_l2_1/error_l2_2), 2)

print '  convergence_l2 = ', convergence_l2
print '    error_l2_1 = ', error_l2_1
print '    error_l2_2 = ', error_l2_2

error_linf_1 = stat1["Fluid"]["FreeSurfaceDifference"]["max"][-1]
error_linf_2 = stat2["Fluid"]["FreeSurfaceDifference"]["max"][-1]
convergence_linf = log((error_linf_1/error_linf_2), 2)

print '  convergence_linf = ', convergence_linf
print '    error_linf_1 = ', error_linf_1
print '    error_linf_2 = ', error_linf_2

convergenceAB = [convergence_l2, convergence_linf]
</variable>

</variables>

<pass_tests>

<test name="Temperature integral Validity:" language="python">
Full_T_int = T_int + T_ref_int
assert(abs(Full_T_int-0.512) &lt; 0.001)
</test>

<test name="Surface Nusselt Number Validity:" language="python">
assert(abs(nu_top-4.45) &lt; 0.02)
</test>

<test name="RMS Velocity Validity:" language="python">
assert(abs(rms_vel-40.0) &lt; 0.05)
</test>

<test name="Adiabatic_Absorption Validity:" language="python">
assert(abs(adiabatic_absorption-0.85) &lt; 0.005)
</test>

<test name="Viscous_Dissipation Validity:" language="python">
assert(abs(viscous_dissipation-0.85) &lt; 0.005)
</test>

<test name="Convergence Validity L2:" language="python">
assert(convergenceAB[0] &gt; 1.0)
</test>

<test name="Convergence Validity Linf:" language="python">
assert(convergenceAB[1] &gt; 1.0)
</test>

</pass_tests>                                                                                                                                                                                                

<warn_tests>
</warn_tests>

</testproblem>





