<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">gplates_test</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <extrude>
          <regions name="WholeMesh">
            <bottom_depth>
              <constant>
                <real_value rank="0">1.0</real_value>
              </constant>
            </bottom_depth>
            <sizing_function>
              <list>
                <real_value shape="1" rank="1">0.5</real_value>
              </list>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">2</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">1</integer_value>
            </bottom_surface_id>
          </regions>
        </extrude>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="InputMesh">
      <from_file file_name="Mesh/spherical_shell">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
    <spherical_earth>
      <linear_mapping/>
    </spherical_earth>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">20</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">6275663000000000.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">15768000000000.0</real_value>
      <comment>500,000 years in seconds. There should therefore be 2 time-steps per gplates stage.</comment>
    </timestep>
    <finish_time>
      <real_value rank="0">6307200000000000.0</real_value>
    </finish_time>
  </timestepping>
  <material_phase name="Mantle">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import get_surface_boundary_info
  get_surface_boundary_info.gplates_interpolator.set_time(t)
  velocity = get_surface_boundary_info.gplates_interpolator.get_velocities(X)
  return velocity</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="Plate_ID" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import get_surface_boundary_info
  get_surface_boundary_info.gplates_interpolator.set_time(t)
  plate_ID = get_surface_boundary_info.gplates_interpolator.get_plate_ID(X)
  return plate_ID</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <vector_field name="Surface_Velocity" rank="1">
      <diagnostic>
        <algorithm name="vector_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">import numpy, math

# Define outer radius of domain. Aside from nodes at this radius, nodal velocities will be set to zero:
outer_radius = 2.22

# Extract relevant fields from state:
u = state.vector_fields["Velocity"] 
X = state.vector_fields["DiagnosticCoordinate"]

# Loop over nodes and zero anything not on surface:
for node in range(field.node_count):
  u0 = u.node_val(node)[0]
  u1 = u.node_val(node)[1]
  u2 = u.node_val(node)[2]
  X0 = X.node_val(node)[0]
  X1 = X.node_val(node)[1]
  X2 = X.node_val(node)[2]
  r = math.sqrt(X0**2+X1**2+X2**2)
  if(r &lt; outer_radius): # If not at surface, zero velocities
    u0 = 0.
    u1 = 0.
    u2 = 0.
  field.set(node,[u0,u1,u2])</string_value>
          <depends>
            <string_value lines="1">DiagnosticCoordinate</string_value>
          </depends>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output>
          <exclude_from_vtu/>
        </output>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <vector_field name="DiagnosticCoordinate" rank="1">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
</fluidity_options>
