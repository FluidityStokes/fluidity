<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">sphere_TEMPLATE</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="ExtrudedMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="ExtrudedMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="ExtrudedMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="InputMesh">
      <from_file file_name="icosahedron_TEMPLATE">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
      <exclude_from_mesh_adaptivity/>
    </mesh>
    <mesh name="ExtrudedMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <extrude>
          <layer name="UpperMantle">
            <regions name="WholeMesh">
              <bottom_depth>
                <constant>
                  <real_value rank="0">0.5</real_value>
                </constant>
              </bottom_depth>
              <sizing_function>
                <constant>
                  <real_value rank="0">0.1</real_value>
                </constant>
              </sizing_function>
              <extruded_region_id>
                <integer_value rank="0">1</integer_value>
              </extruded_region_id>
              <top_surface_id>
                <integer_value rank="0">1</integer_value>
              </top_surface_id>
              <bottom_surface_id>
                <integer_value rank="0">3</integer_value>
              </bottom_surface_id>
            </regions>
          </layer>
          <layer name="LowerMantle">
            <regions name="WholeMesh">
              <bottom_depth>
                <constant>
                  <real_value rank="0">1.0</real_value>
                </constant>
              </bottom_depth>
              <sizing_function>
                <constant>
                  <real_value rank="0">0.1</real_value>
                </constant>
              </sizing_function>
              <extruded_region_id>
                <integer_value rank="0">2</integer_value>
              </extruded_region_id>
              <bottom_surface_id>
                <integer_value rank="0">2</integer_value>
              </bottom_surface_id>
            </regions>
          </layer>
        </extrude>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">6</integer_value>
      </degree>
    </quadrature>
    <spherical_earth>
      <superparametric_mapping/>
    </spherical_earth>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="CoordinateMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.001</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1</real_value>
    </finish_time>
    <final_timestep>
      <integer_value rank="0">1</integer_value>
    </final_timestep>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">0</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <python>
              <string_value lines="20" type="code" language="python">def val(X,t):
  import math
  r = math.sqrt(X[0]**2+X[1]**2+X[2]**2)
  return [-X[0]/r,-X[1]/r,-X[2]/r]</string_value>
            </python>
          </value>
          <output>
            <exclude_from_vtu/>
          </output>
          <stat>
            <exclude_from_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Fields">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1</real_value>
          </reference_density>
          <subtract_out_hydrostatic_level/>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
            <integrate_continuity_by_parts/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method>
            <full_schur_complement>
              <inner_matrix name="FullMomentumMatrix">
                <solver>
                  <iterative_method name="cg"/>
                  <preconditioner name="gamg"/>
                  <relative_error>
                    <real_value rank="0">1e-7</real_value>
                  </relative_error>
                  <absolute_error>
                    <real_value rank="0">1e-12</real_value>
                  </absolute_error>
                  <max_iterations>
                    <integer_value rank="0">1000</integer_value>
                  </max_iterations>
                  <remove_null_space>
                    <no_components/>
                    <all_rotations/>
                    <test_null_space/>
                  </remove_null_space>
                  <multigrid_near_null_space>
                    <all_components/>
                  </multigrid_near_null_space>
                  <never_ignore_solver_failures/>
                  <diagnostics>
                    <monitors/>
                  </diagnostics>
                </solver>
              </inner_matrix>
              <preconditioner_matrix name="ScaledPressureMassMatrix"/>
            </full_schur_complement>
          </use_projection_method>
        </scheme>
        <solver>
          <iterative_method name="fgmres"/>
          <preconditioner name="ksp">
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="gamg"/>
              <relative_error>
                <real_value rank="0">1e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <remove_null_space/>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1e-12</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <remove_null_space>
            <test_null_space/>
          </remove_null_space>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <no_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <surface_integral type="value" name="InteriorSurface">
            <surface_ids>
              <integer_value shape="1" rank="1">3</integer_value>
            </surface_ids>
          </surface_integral>
        </stat>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <partial_stress_form/>
            </stress_terms>
            <buoyancy>
              <radial_gravity_direction_at_gauss_points/>
            </buoyancy>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="gamg"/>
          <relative_error>
            <real_value rank="0">1e-07</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1e-12</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <remove_null_space>
            <no_components/>
            <all_rotations/>
          </remove_null_space>
          <multigrid_near_null_space>
            <all_components/>
          </multigrid_near_null_space>
          <never_ignore_solver_failures/>
          <diagnostics>
            <print_norms/>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="3" dim1="dim" rank="1">0.0 0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="FreeSlip">
          <surface_ids>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_surface>
              <normal_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </normal_component>
              <normal_direction>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
  from math import sqrt
  r = sqrt(X[0]**2+X[1]**2+X[2]**2)
  return X[0]/r,X[1]/r,X[2]/r</string_value>
                </python>
              </normal_direction>
            </align_bc_with_surface>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Internal">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="flux">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
  from solution import Ra, Y_cartesian
  from math import sqrt
  return -Ra*Y_cartesian(X)*X[0]/2.</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
  from solution import Ra, Y_cartesian
  from math import sqrt
  return -Ra*Y_cartesian(X)*X[1]/2.</string_value>
                </python>
              </y_component>
              <z_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
  from solution import Ra, Y_cartesian
  from math import sqrt
  return -Ra*Y_cartesian(X)*X[2]/2.</string_value>
                </python>
              </z_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <mesh name="VelocityMesh"/>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <constant>
                  <real_value symmetric="true" dim2="dim" shape="3 3" dim1="dim" rank="2">1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0</real_value>
                </constant>
              </anisotropic_symmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="AnalyticalPressure" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="UpperMantle">
          <region_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
    import solution
    return solution.get_pressure_solution(X, 0)</string_value>
          </python>
        </value>
        <value name="LowerMantle">
          <region_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
    import solution
    return solution.get_pressure_solution(X, 1)</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="PressureError" rank="0">
      <diagnostic>
        <algorithm source_field_2_type="scalar" name="scalar_difference" source_field_1_name="PressureRemeaned" source_field_2_name="AnalyticalPressure" material_phase_support="single" source_field_1_type="scalar"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PressureRemeaned" rank="0">
      <diagnostic>
        <algorithm material_phase_support="single" source_field_type="scalar" source_field_name="Pressure" name="subtract_average"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="AnalyticalVelocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="UpperMantle">
          <region_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import solution
  return solution.get_cartesian_solution(X, 0)</string_value>
          </python>
        </value>
        <value name="LowerMantle">
          <region_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import solution
  return solution.get_cartesian_solution(X, 1)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <vector_field name="VelocityError" rank="1">
      <diagnostic>
        <algorithm source_field_2_type="vector" name="vector_difference" source_field_1_name="Velocity" source_field_2_name="AnalyticalVelocity" material_phase_support="single" source_field_1_type="vector"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <vector_field name="AnalyticalVelocitySpherical" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="UpperMantle">
          <region_ids>
            <integer_value shape="1" rank="1">1</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import solution
  return solution.get_spherical_solution(X, 0)</string_value>
          </python>
        </value>
        <value name="LowerMantle">
          <region_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </region_ids>
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import solution
  return solution.get_spherical_solution(X, 1)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
  </material_phase>
</fluidity_options>
