<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">stokes-1e4-p2p1-TALA-Di-0.25</string_value>
    <comment>This tests compressible stokes. It is a TALA case at a dissipation number of 0.25 and a Rayleigh number of 1e4. Values are compared to the benchmark solutions of King et al. 2009.</comment>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="square-structured-linear">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="P2DGMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="P4Mesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">4</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">50</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="CoordinateMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.001</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">100000.0</real_value>
    </finish_time>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">5.0</real_value>
      </requested_cfl>
      <courant_number name="CFLNumber">
        <mesh name="VelocityMesh"/>
      </courant_number>
      <increase_tolerance>
        <real_value rank="0">2.5</real_value>
      </increase_tolerance>
    </adaptive_timestep>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.0e-4</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">0.25</real_value>
        <comment>Equivalent to Dissipation Number. Note that to achieve the desired Rayleigh number, other terms (e.g. viscosity, diffusivity) need to be scaled accordingly.</comment>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="2" dim1="dim" rank="1">0.0 -1.0</real_value>
            </constant>
          </value>
          <output>
            <exclude_from_vtu/>
          </output>
          <stat>
            <exclude_from_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Fluid">
    <equation_of_state>
      <compressible>
        <linearised_mantle>
          <exclude_pressure_buoyancy/>
        </linearised_mantle>
      </compressible>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <spatial_discretisation>
          <continuous_galerkin/>
          <compressible/>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method>
            <full_schur_complement>
              <inner_matrix name="FullMomentumMatrix">
                <solver>
                  <iterative_method name="preonly"/>
                  <preconditioner name="lu">
                    <factorization_package name="petsc"/>
                  </preconditioner>
                  <relative_error>
                    <real_value rank="0">1.0e-7</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">1000</integer_value>
                  </max_iterations>
                  <start_from_zero/>
                  <never_ignore_solver_failures/>
                  <diagnostics>
                    <monitors/>
                  </diagnostics>
                </solver>
              </inner_matrix>
              <preconditioner_matrix name="DiagonalSchurComplement"/>
            </full_schur_complement>
          </use_projection_method>
        </scheme>
        <solver>
          <iterative_method name="fgmres"/>
          <preconditioner name="jacobi"/>
          <relative_error>
            <real_value rank="0">1.0e-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <remove_null_space/>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">1.0</real_value>
          </constant>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
          <use_reference_density/>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):

  import math
  from constants import *
  depth = 1.0 - X[1]
  rho_ref = rho_0 * math.exp((depth*Di)/gamma)
  return rho_ref</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <stress_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="petsc"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="FreeSlipX">
          <surface_ids>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="FreeSlipY">
          <surface_ids>
            <integer_value shape="2" rank="1">3 4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <anisotropic_symmetric>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X, t):
  from constants import *
  mu = Di / Ra
  visc = numpy.zeros((2,2))
  for i in range(2):
    for j in range(2):
      visc[i][j] = mu
  return visc</string_value>
                </python>
              </anisotropic_symmetric>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="Temperature" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="MantleAnelasticEnergy">
          <density name="CompressibleReferenceDensity"/>
        </equation>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="petsc"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">10000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import math
  from constants import *
  T_CMB  = 1.0 - (T_s*math.exp(Di) - T_s)
  T = (1 - X[0])*T_CMB
  return T</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="HotBase">
          <surface_ids>
            <integer_value shape="1" rank="1">4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(X,t):
  import math
  from constants import *
  T_CMB  = 1.0 - (T_s*math.exp(Di) - T_s)
  return T_CMB</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="ColdTop">
          <surface_ids>
            <integer_value shape="1" rank="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Insulating">
          <surface_ids>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </surface_ids>
          <type name="neumann">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">1.0</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <mesh name="P2DGMesh"/>
            <algorithm name="viscous_dissipation" material_phase_support="single "/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <scalar_field name="Absorption" rank="0">
          <diagnostic>
            <mesh name="VelocityMesh"/>
            <algorithm name="adiabatic_heating_coefficient" material_phase_support="single "/>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat>
          <surface_integral type="gradient_normal" name="LeftH">
            <surface_ids>
              <integer_value shape="1" rank="1">1</integer_value>
            </surface_ids>
          </surface_integral>
          <surface_integral type="gradient_normal" name="RightH">
            <surface_ids>
              <integer_value shape="1" rank="1">2</integer_value>
            </surface_ids>
          </surface_integral>
          <surface_integral type="gradient_normal" name="TopH">
            <surface_ids>
              <integer_value shape="1" rank="1">3</integer_value>
            </surface_ids>
          </surface_integral>
          <surface_integral type="gradient_normal" name="BottomH">
            <surface_ids>
              <integer_value shape="1" rank="1">4</integer_value>
            </surface_ids>
          </surface_integral>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="CompressibleReferenceDensity" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):

  import math
  from constants import *
 
  depth = 1.0 - X[1]
  rho_ref = rho_0 * math.exp((depth*Di)/gamma)
  return rho_ref</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="IsobaricThermalExpansivity" rank="0">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">1.0</real_value>
          </constant>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="CompressibleEOSDensity" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="CompressibleReferenceTemperature" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):

  import math
  from constants import *  
  depth = 1.0 - X[1]
  # Note - to ensure full T field lies between 0 and 1, we subtract (T_Surf/Delta_T) here:
  temp_ref =  T_s*math.exp(depth*Di) - T_s
  return temp_ref</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="IsobaricSpecificHeatCapacity" rank="0">
      <prescribed>
        <mesh name="CoordinateMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">1.0</real_value>
          </constant>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <scalar_field name="Adiabatic_Absorption" rank="0">
      <diagnostic>
        <algorithm name="adiabatic_heating_absorption" material_phase_support="single "/>
        <mesh name="P4Mesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="FullTemperature" rank="0">
      <diagnostic>
        <algorithm source_field_2_type="scalar" name="scalar_sum" source_field_1_name="Temperature" source_field_2_name="CompressibleReferenceTemperature" material_phase_support="single" source_field_1_type="scalar"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat>
          <surface_integral type="gradient_normal" name="TopH">
            <surface_ids>
              <integer_value shape="1" rank="1">3</integer_value>
            </surface_ids>
          </surface_integral>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
</fluidity_options>
