import numpy
from math import sqrt, atan2, cos, sin

eta = 1.
g = 1.
Ra = g/eta
R = numpy.array([2.22, 1.22])
Rr = R[::-1]
rp = R[1]+0.5
n = 2

if n>1:
    R1, R2 = R
    C = numpy.array([
        R1**2*Ra*rp**(-n)*(-R1**(2*n)*R2**2*n*rp**(2*n + 2) + R1**(2*n)*R2**2*rp**(2*n + 2) + R1**(2*n)*R2**(2*n + 2)*n**2*rp**2 - R1**(2*n)*R2**(2*n + 2)*rp**2 - R1**(2*n)*R2**(2*n + 4)*n**2 + R1**(2*n)*R2**(2*n + 4)*n + R1**(2*n + 2)*R2**2*n*rp**(2*n) - R1**(2*n + 2)*R2**(2*n)*n**2*rp**2 + R1**(2*n + 2)*R2**(2*n + 2)*n**2 - R1**(2*n + 2)*R2**(2*n + 2)*n + R2**(2*n + 2)*n*rp**(2*n + 2) - R2**(2*n + 2)*rp**(2*n + 2) - R2**(2*n + 4)*n*rp**(2*n) + R2**(4*n + 2)*rp**2)/(8*(-R1**2*R2**(4*n + 2)*n + R1**2*R2**(4*n + 2) + R1**(2*n)*R2**(2*n + 4)*n**3 - R1**(2*n)*R2**(2*n + 4)*n**2 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n**3 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n**2 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n - 2*R1**(2*n + 2)*R2**(2*n + 2) + R1**(2*n + 4)*R2**(2*n)*n**3 - R1**(2*n + 4)*R2**(2*n)*n**2 - R1**(4*n + 2)*R2**2*n + R1**(4*n + 2)*R2**2)),
        R2**2*Ra*rp**(-n)*(R1**2*R2**(2*n)*n*rp**(2*n + 2) - R1**2*R2**(2*n)*rp**(2*n + 2) - R1**2*R2**(2*n + 2)*n*rp**(2*n) + R1**(2*n)*R2**(2*n + 2)*n**2*rp**2 - R1**(2*n + 2)*R2**(2*n)*n**2*rp**2 + R1**(2*n + 2)*R2**(2*n)*rp**2 - R1**(2*n + 2)*R2**(2*n + 2)*n**2 + R1**(2*n + 2)*R2**(2*n + 2)*n - R1**(2*n + 2)*n*rp**(2*n + 2) + R1**(2*n + 2)*rp**(2*n + 2) + R1**(2*n + 4)*R2**(2*n)*n**2 - R1**(2*n + 4)*R2**(2*n)*n + R1**(2*n + 4)*n*rp**(2*n) - R1**(4*n + 2)*rp**2)/(8*(-R1**2*R2**(4*n + 2)*n + R1**2*R2**(4*n + 2) + R1**(2*n)*R2**(2*n + 4)*n**3 - R1**(2*n)*R2**(2*n + 4)*n**2 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n**3 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n**2 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n - 2*R1**(2*n + 2)*R2**(2*n + 2) + R1**(2*n + 4)*R2**(2*n)*n**3 - R1**(2*n + 4)*R2**(2*n)*n**2 - R1**(4*n + 2)*R2**2*n + R1**(4*n + 2)*R2**2))
    ])
    D = numpy.array([
        R1**(2*n + 2)*Ra*rp**(-n)*(-R1**2*R2**(2*n)*n**2*rp**(2*n + 2) + R1**2*R2**(2*n + 2)*n**2*rp**(2*n) + R1**2*R2**(2*n + 2)*n*rp**(2*n) - R1**2*R2**(4*n + 2)*n + R1**(2*n)*R2**2*rp**(2*n + 2) - R1**(2*n)*R2**(2*n + 2)*n*rp**2 - R1**(2*n)*R2**(2*n + 2)*rp**2 + R1**(2*n)*R2**(2*n + 4)*n + R2**(2*n + 2)*n**2*rp**(2*n + 2) - R2**(2*n + 2)*rp**(2*n + 2) - R2**(2*n + 4)*n**2*rp**(2*n) - R2**(2*n + 4)*n*rp**(2*n) + R2**(4*n + 2)*n*rp**2 + R2**(4*n + 2)*rp**2)/(8*(-R1**2*R2**(4*n + 2)*n - R1**2*R2**(4*n + 2) + R1**(2*n)*R2**(2*n + 4)*n**3 + R1**(2*n)*R2**(2*n + 4)*n**2 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n**3 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n**2 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n + 2*R1**(2*n + 2)*R2**(2*n + 2) + R1**(2*n + 4)*R2**(2*n)*n**3 + R1**(2*n + 4)*R2**(2*n)*n**2 - R1**(4*n + 2)*R2**2*n - R1**(4*n + 2)*R2**2)),
        R2**(2*n + 2)*Ra*rp**(-n)*(-R1**2*R2**(2*n)*rp**(2*n + 2) + R1**(2*n)*R2**2*n**2*rp**(2*n + 2) - R1**(2*n + 2)*R2**2*n**2*rp**(2*n) - R1**(2*n + 2)*R2**2*n*rp**(2*n) + R1**(2*n + 2)*R2**(2*n)*n*rp**2 + R1**(2*n + 2)*R2**(2*n)*rp**2 - R1**(2*n + 2)*n**2*rp**(2*n + 2) + R1**(2*n + 2)*rp**(2*n + 2) - R1**(2*n + 4)*R2**(2*n)*n + R1**(2*n + 4)*n**2*rp**(2*n) + R1**(2*n + 4)*n*rp**(2*n) + R1**(4*n + 2)*R2**2*n - R1**(4*n + 2)*n*rp**2 - R1**(4*n + 2)*rp**2)/(8*(-R1**2*R2**(4*n + 2)*n - R1**2*R2**(4*n + 2) + R1**(2*n)*R2**(2*n + 4)*n**3 + R1**(2*n)*R2**(2*n + 4)*n**2 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n**3 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n**2 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n + 2*R1**(2*n + 2)*R2**(2*n + 2) + R1**(2*n + 4)*R2**(2*n)*n**3 + R1**(2*n + 4)*R2**(2*n)*n**2 - R1**(4*n + 2)*R2**2*n - R1**(4*n + 2)*R2**2))
    ])
    E = numpy.array([
        Ra*rp**(-n)*(R1**2*R2**(2*n)*n*rp**(2*n + 2) - R1**2*R2**(2*n + 2)*n*rp**(2*n) - R1**2*R2**(2*n + 2)*rp**(2*n) + R1**2*R2**(4*n + 2) - R1**(2*n)*R2**2*n*rp**(2*n + 2) + R1**(2*n)*R2**(2*n + 2)*n**2*rp**2 + R1**(2*n)*R2**(2*n + 2)*n*rp**2 - R1**(2*n)*R2**(2*n + 4)*n**2 + R1**(2*n + 2)*R2**2*n*rp**(2*n) + R1**(2*n + 2)*R2**2*rp**(2*n) - R1**(2*n + 2)*R2**(2*n)*n**2*rp**2 - R1**(2*n + 2)*R2**(2*n)*n*rp**2 + R1**(2*n + 2)*R2**(2*n + 2)*n**2 - R1**(2*n + 2)*R2**(2*n + 2))/(8*(R1**2*R2**(4*n + 2)*n + R1**2*R2**(4*n + 2) - R1**(2*n)*R2**(2*n + 4)*n**3 - R1**(2*n)*R2**(2*n + 4)*n**2 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n**3 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n**2 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n - 2*R1**(2*n + 2)*R2**(2*n + 2) - R1**(2*n + 4)*R2**(2*n)*n**3 - R1**(2*n + 4)*R2**(2*n)*n**2 + R1**(4*n + 2)*R2**2*n + R1**(4*n + 2)*R2**2)),
        Ra*rp**(-n)*(R1**2*R2**(2*n)*n*rp**(2*n + 2) - R1**2*R2**(2*n + 2)*n*rp**(2*n) - R1**2*R2**(2*n + 2)*rp**(2*n) - R1**(2*n)*R2**2*n*rp**(2*n + 2) + R1**(2*n)*R2**(2*n + 2)*n**2*rp**2 + R1**(2*n)*R2**(2*n + 2)*n*rp**2 + R1**(2*n + 2)*R2**2*n*rp**(2*n) + R1**(2*n + 2)*R2**2*rp**(2*n) - R1**(2*n + 2)*R2**(2*n)*n**2*rp**2 - R1**(2*n + 2)*R2**(2*n)*n*rp**2 - R1**(2*n + 2)*R2**(2*n + 2)*n**2 + R1**(2*n + 2)*R2**(2*n + 2) + R1**(2*n + 4)*R2**(2*n)*n**2 - R1**(4*n + 2)*R2**2)/(8*(R1**2*R2**(4*n + 2)*n + R1**2*R2**(4*n + 2) - R1**(2*n)*R2**(2*n + 4)*n**3 - R1**(2*n)*R2**(2*n + 4)*n**2 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n**3 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n**2 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n - 2*R1**(2*n + 2)*R2**(2*n + 2) - R1**(2*n + 4)*R2**(2*n)*n**3 - R1**(2*n + 4)*R2**(2*n)*n**2 + R1**(4*n + 2)*R2**2*n + R1**(4*n + 2)*R2**2))
    ])
    F = numpy.array([
        -R1**(2*n)*Ra*rp**(-n)*(R1**2*R2**(2*n)*n**2*rp**(2*n + 2) - R1**2*R2**(2*n)*n*rp**(2*n + 2) - R1**2*R2**(2*n + 2)*n**2*rp**(2*n) + R1**2*R2**(2*n + 2)*rp**(2*n) + R1**2*R2**(4*n + 2)*n - R1**2*R2**(4*n + 2) - R1**(2*n + 2)*R2**2*rp**(2*n) + R1**(2*n + 2)*R2**(2*n)*n*rp**2 - R1**(2*n + 2)*R2**(2*n + 2)*n + R1**(2*n + 2)*R2**(2*n + 2) - R2**(2*n + 2)*n**2*rp**(2*n + 2) + R2**(2*n + 2)*n*rp**(2*n + 2) + R2**(2*n + 4)*n**2*rp**(2*n) - R2**(4*n + 2)*n*rp**2)/(8*(R1**2*R2**(4*n + 2)*n - R1**2*R2**(4*n + 2) - R1**(2*n)*R2**(2*n + 4)*n**3 + R1**(2*n)*R2**(2*n + 4)*n**2 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n**3 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n**2 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n + 2*R1**(2*n + 2)*R2**(2*n + 2) - R1**(2*n + 4)*R2**(2*n)*n**3 + R1**(2*n + 4)*R2**(2*n)*n**2 + R1**(4*n + 2)*R2**2*n - R1**(4*n + 2)*R2**2)),
        -R2**(2*n)*Ra*rp**(-n)*(R1**2*R2**(2*n + 2)*rp**(2*n) - R1**(2*n)*R2**2*n**2*rp**(2*n + 2) + R1**(2*n)*R2**2*n*rp**(2*n + 2) - R1**(2*n)*R2**(2*n + 2)*n*rp**2 + R1**(2*n + 2)*R2**2*n**2*rp**(2*n) - R1**(2*n + 2)*R2**2*rp**(2*n) + R1**(2*n + 2)*R2**(2*n + 2)*n - R1**(2*n + 2)*R2**(2*n + 2) + R1**(2*n + 2)*n**2*rp**(2*n + 2) - R1**(2*n + 2)*n*rp**(2*n + 2) - R1**(2*n + 4)*n**2*rp**(2*n) - R1**(4*n + 2)*R2**2*n + R1**(4*n + 2)*R2**2 + R1**(4*n + 2)*n*rp**2)/(8*(R1**2*R2**(4*n + 2)*n - R1**2*R2**(4*n + 2) - R1**(2*n)*R2**(2*n + 4)*n**3 + R1**(2*n)*R2**(2*n + 4)*n**2 + 2*R1**(2*n + 2)*R2**(2*n + 2)*n**3 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n**2 - 2*R1**(2*n + 2)*R2**(2*n + 2)*n + 2*R1**(2*n + 2)*R2**(2*n + 2) - R1**(2*n + 4)*R2**(2*n)*n**3 + R1**(2*n + 4)*R2**(2*n)*n**2 + R1**(4*n + 2)*R2**2*n - R1**(4*n + 2)*R2**2)),
    ])
    G = -4*eta*E*(n+1)
    H = -4*eta*F*(n+1)
else:
    raise NotImplemented()


def u_r(r, theta):
  dpsi_dtheta = n*cos(n*theta)*(C*r**n+D*r**(-n)+E*r**(n+2)+F*r**(-n+2))
  return -dpsi_dtheta/r

def u_theta(r, theta):
  dpsi_dr = sin(n*theta)*(C*n*r**(n-1) + D*-n*r**(-n-1) + E*(n+2)*r**(n+1) + F*(-n+2)*r**(-n+1))
  return dpsi_dr

def p(r, theta):
    return (G*r**n + H*r**(-n))*cos(n*theta)

def get_cartesian_solution(X, i):
  # i==0: upper mantle, i==1: lower mantle
  r = sqrt(X[0]**2+X[1]**2)
  theta = atan2(X[1], X[0])
  ur = u_r(r,theta)[i]
  ut = u_theta(r,theta)[i]
  return [ur*X[0]/r - ut*X[1]/r, ur*X[1]/r + ut*X[0]/r]

def get_cartesian_pressure_solution(X, i):
  # i==0: upper mantle, i==1: lower mantle
  r = sqrt(X[0]**2+X[1]**2)
  theta = atan2(X[1], X[0])
  return p(r, theta)[i]
